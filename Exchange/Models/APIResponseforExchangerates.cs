

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
namespace Exchange.Models
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using CodeBeautify;
    //
    //    var welcome5 = Welcome5.FromJson(jsonString);

  
        

        public partial class APIResponseforExchangerates
    {
       
        [JsonProperty("success")]
            public bool Success { get; set; }

            [JsonProperty("terms")]
            public Uri Terms { get; set; }

            [JsonProperty("privacy")]
            public Uri Privacy { get; set; }

            [JsonProperty("change")]
            public bool Change { get; set; }

            [JsonProperty("start_date")]
            public DateTimeOffset StartDate { get; set; }

            [JsonProperty("end_date")]
            public DateTimeOffset EndDate { get; set; }

            [JsonProperty("source")]
            public string Source { get; set; }

            [JsonProperty("quotes")]
            public Quotes Quotes { get; set; }
        }

        public  class Quotes
        {
            [JsonProperty("EURINR")]
            public Eurinr Eurinr { get; set; }
        }

        public  class Eurinr
        {
            [JsonProperty("start_rate")]
            public decimal StartRate { get; set; }

            [JsonProperty("end_rate")]
            public decimal EndRate { get; set; }

            [JsonProperty("change")]
            public decimal Change { get; set; }

            [JsonProperty("change_pct")]
            public decimal ChangePct { get; set; }
        }


    public partial class APIResponseforExchangerates
    {
        public static APIResponseforExchangerates FromJson(string json) => JsonConvert.DeserializeObject<APIResponseforExchangerates>(json, Converter.Settings);
    }

    public static class Serialize
        {
            public static string ToJson(this APIResponseforExchangerates self) => JsonConvert.SerializeObject(self, Converter.Settings);
        }

        internal static class Converter
        {
            public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
            {
                MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
                DateParseHandling = DateParseHandling.None,
                Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            };
        }
    }


